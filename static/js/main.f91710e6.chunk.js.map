{"version":3,"sources":["components/HeaderAndNav.tsx","styles/drawerWidth.ts","components/TimeDisplay.tsx","components/StudyRecordTable.tsx","utils/time.ts","utils/fetchReocrds.ts","pages/Stopwatch.tsx","components/Statistic.tsx","pages/MyRecords.tsx","pages/DetailRecord.tsx","pages/StatisticOfUsers.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["useStyles","makeStyles","theme","drawer","breakpoints","up","width","flexShrink","appBar","marginLeft","menuButton","marginRight","spacing","display","toolbar","mixins","drawerPaper","Header","classes","useState","mobileOpen","setMobileOpen","handleDrawerToggle","AppBar","className","component","Toolbar","IconButton","color","aria-label","edge","onClick","Typography","noWrap","variant","Nav","open","onClose","useTheme","List","ListItem","ListItemIcon","ListItemText","Link","RouterLink","to","Hidden","smUp","implementation","Drawer","anchor","direction","paper","ModalProps","keepMounted","xsDown","getDisplayTime","number","hours","minutes","seconds","caption","padding","thead","position","height","overflow","tbody","td","fontSize","textAlign","borderBottom","record","TableContainer","Table","TableHead","TableRow","TableCell","scope","TableBody","periodRecords","map","period","studyTimeHours","studyTimeMinutes","studyTimeSeconds","restTimeHours","restTimeMinutes","restTimeSeconds","key","TimeDisplay","undefined","timeObject","performance","Date","getNow","now","convertMiliSecondsToSeconds","miliseconds","Math","floor","convertSecondsToTime","sec","convertTimeToSeconds","time","convertTimeAsKorean","getDateAsKorean","date","getFullYear","getMonth","getDate","Error","getDayAsKorean","getDay","a","fetch","method","mode","headers","body","JSON","stringify","console","error","signal","Accept","response","ok","json","totalPeriod","totalRestTime","totalStudyTime","textCenter","textRight","timeDisplay","marginBottom","switch","displayedLabel","displayedTime","buttonGap","margin","recordReducer","state","lastPeriodRecord","type","heading","newState","newPeriodRecords","length","push","lastTotalStudyTime","props","localStorageKeyRef","useRef","totalRunningTimeRef","totalRestTimeRef","setTotalStudyTime","setTotalRestTime","isStarted","setIsStarted","isResumed","setIsResumed","useReducer","setRecord","openSaveDialog","setOpenSaveDialog","showTotalTime","setShowTotalTime","currentStudyTime","current","currentRestTime","displayedHeading","useLayoutEffect","rAF","totalRunningTime","idleTime","requestAnimationFrame","timer","totalRunningTimeAsSec","totalHours","totalMinutes","totalSeconds","cancelAnimationFrame","totalRestTimeAsSec","Grid","container","justify","alignItems","item","xs","md","Switch","checked","onChange","inputProps","align","Button","size","alert","StudyRecordTable","Dialog","aria-labelledby","DialogTitle","disableTypography","id","DialogContent","onSubmit","e","preventDefault","localStorage","setItem","localKey","removeItem","postStudyRecordsOfAllUsers","TextField","autoFocus","label","target","value","DialogActions","averageStudyTime","averageRestTime","initialAverageTime","round","flex","columnDirection","flexDirection","records","setRecords","dates","Set","sort","openRecord","setOpenRecord","reduce","prevTotalPeriod","timeAsSec","useEffect","i","parse","getItem","clear","Statistic","button","Collapse","in","timeout","filter","toString","useParams","idAsNumber","Number","localStorageKey","info","statisticFetched","setStatisticFetched","setTotalPeriod","abortController","AbortController","getStatisticOfAllUsers","then","fetchResult","catch","abort","root","minHeight","content","flexGrow","main","footer","marginTop","App","fetchStatistic","setFetchStatistic","aria-live","CssBaseline","Container","exact","path","DetailRecord","MyRecords","StatisticOfUsers","Stopwatch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f91710e6.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  IconButton,\r\n  Drawer,\r\n  Hidden,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Link,\r\n  makeStyles,\r\n  useTheme,\r\n  ListItemIcon,\r\n} from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport NotesIcon from '@material-ui/icons/Notes';\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\nimport { OnClick } from '../@types/AppEvent';\r\nimport { drawerWidth } from '../styles/drawerWidth';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  drawer: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n}));\r\n\r\nexport function Header() {\r\n  const classes = useStyles();\r\n  const [mobileOpen, setMobileOpen] = useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBar className={classes.appBar} component=\"header\">\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"Open main menu\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography noWrap variant=\"h6\" component=\"h1\">\r\n            스톱워치\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Nav open={mobileOpen} onClose={handleDrawerToggle} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport function Nav({ open, onClose }: { open: boolean; onClose: OnClick }) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const drawer = (\r\n    <List>\r\n      <ListItem>\r\n        <ListItemIcon>\r\n          <AccessTimeIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          <Link component={RouterLink} to=\"/\">\r\n            스톱워치\r\n          </Link>\r\n        </ListItemText>\r\n      </ListItem>\r\n\r\n      <ListItem>\r\n        <ListItemIcon>\r\n          <NotesIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          <Link component={RouterLink} to=\"/myRecords\">\r\n            내 기록\r\n          </Link>\r\n        </ListItemText>\r\n      </ListItem>\r\n\r\n      <ListItem>\r\n        <ListItemIcon>\r\n          <EqualizerIcon />\r\n        </ListItemIcon>\r\n        <ListItemText>\r\n          <Link component={RouterLink} to=\"/statisticOfUsers\">\r\n            전체유저 통계\r\n          </Link>\r\n        </ListItemText>\r\n      </ListItem>\r\n    </List>\r\n  );\r\n\r\n  return (\r\n    <nav className={classes.drawer} aria-label=\"Main menu\">\r\n      <Hidden smUp implementation=\"css\">\r\n        <Drawer\r\n          variant=\"temporary\"\r\n          anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n          open={open}\r\n          onClose={onClose}\r\n          classes={{ paper: classes.drawerPaper }}\r\n          ModalProps={{ keepMounted: true }}\r\n        >\r\n          <Toolbar />\r\n          {drawer}\r\n        </Drawer>\r\n      </Hidden>\r\n      <Hidden xsDown implementation=\"css\">\r\n        <Drawer\r\n          classes={{\r\n            paper: classes.drawerPaper,\r\n          }}\r\n          variant=\"permanent\"\r\n          open\r\n        >\r\n          <Toolbar />\r\n          {drawer}\r\n        </Drawer>\r\n      </Hidden>\r\n    </nav>\r\n  );\r\n}\r\n","export const drawerWidth = 200;\r\n","import React from 'react';\r\nimport { Time } from '../@types/time';\r\n\r\n// 입력값이 10보다 작으면 앞에 0을 붙인 문자열을 return\r\n// 입력값이 10 이상이면 입력값을 그대로 return\r\n// 이로써 화면에 표시되는 시(또는 분 또는 초)가\r\n// 10보다 작을 경우 앞에 0을 붙인 값이 화면에 표시됨\r\nfunction getDisplayTime(number: number): string {\r\n  return number < 10 ? `0${number}` : `${number}`;\r\n}\r\n\r\nexport default function ({ hours, minutes, seconds }: Time) {\r\n  return (\r\n    <span>\r\n      {getDisplayTime(hours)}:{getDisplayTime(minutes)}:\r\n      {getDisplayTime(seconds)}\r\n    </span>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport TimeDisplay from './TimeDisplay';\r\nimport { StudyRecord } from '../@types/studyRecord';\r\nimport {\r\n  TableContainer,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  makeStyles,\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  caption: {\r\n    padding: `0 !important`,\r\n  },\r\n  thead: {\r\n    position: 'absolute',\r\n    width: '1px',\r\n    height: '1px',\r\n    overflow: 'hidden',\r\n  },\r\n  tbody: {\r\n    '& td:nth-child(1)': {\r\n      width: '20%',\r\n    },\r\n    '& td:nth-child(2)': {\r\n      width: '40%',\r\n    },\r\n    '& td:nth-child(3)': {\r\n      width: '40%',\r\n    },\r\n  },\r\n  td: {\r\n    fontSize: `calc(1rem + 1vw)`,\r\n    textAlign: 'center',\r\n    borderBottom: 0,\r\n  },\r\n}));\r\n\r\nexport default function ({ record }: { record: StudyRecord }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <TableContainer component=\"article\">\r\n      <Table>\r\n        <Typography\r\n          variant=\"srOnly\"\r\n          component=\"caption\"\r\n          className={classes.caption}\r\n        >\r\n          교시당 공부시간 및 휴식시간\r\n        </Typography>\r\n\r\n        <TableHead className={classes.thead}>\r\n          <TableRow>\r\n            <TableCell scope=\"col\">교시</TableCell>\r\n            <TableCell scope=\"col\">공부시간</TableCell>\r\n            <TableCell scope=\"col\">휴식시간</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n\r\n        <TableBody className={classes.tbody}>\r\n          {record.periodRecords.map(\r\n            ({\r\n              period,\r\n              studyTimeHours,\r\n              studyTimeMinutes,\r\n              studyTimeSeconds,\r\n              restTimeHours,\r\n              restTimeMinutes,\r\n              restTimeSeconds,\r\n            }) => (\r\n              <TableRow key={period}>\r\n                <TableCell className={classes.td}>{period}</TableCell>\r\n\r\n                <TableCell className={classes.td}>\r\n                  <TimeDisplay\r\n                    hours={studyTimeHours as number}\r\n                    minutes={studyTimeMinutes as number}\r\n                    seconds={studyTimeSeconds as number}\r\n                  />\r\n                </TableCell>\r\n\r\n                {/* restTime_hours가 undefined가 아니면 나머지 restTime들도 undefined가 아니므로 restTime_hours만 사용 */}\r\n                {restTimeHours !== undefined ? (\r\n                  <TableCell className={classes.td}>\r\n                    <TimeDisplay\r\n                      hours={restTimeHours}\r\n                      minutes={restTimeMinutes as number}\r\n                      seconds={restTimeSeconds as number}\r\n                    />\r\n                  </TableCell>\r\n                ) : (\r\n                  <TableCell className={classes.td}></TableCell>\r\n                )}\r\n              </TableRow>\r\n            )\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import { Time, TimeObject } from '../@types/time';\r\n\r\nexport const isPerformanceExist: boolean =\r\n  typeof performance === 'object' ? true : false;\r\n// performance가 존재하지 않으면 Date로 대체\r\nexport const timeObject: TimeObject = isPerformanceExist ? performance : Date;\r\n// getNow 함수를 이용하는 이유는 performance.now()를 사용할 수 없을 경우 Date.now()를 사용하기 위함\r\nexport const getNow = (): number => timeObject.now();\r\nexport const convertMiliSecondsToSeconds = (miliseconds: number): number =>\r\n  Math.floor(miliseconds / 1000);\r\n\r\n// getTime는 초로 표현된 시간값을 입력값으로 받아\r\n// 몇 시간, 몇 분, 몇 초인지를 구할 수 있게 해줌\r\nexport const convertSecondsToTime = (sec: number): Time => {\r\n  const hours: number = Math.floor(sec / 3600);\r\n  const minutes: number = Math.floor((sec - hours * 3600) / 60);\r\n  const seconds: number = sec - hours * 3600 - minutes * 60;\r\n\r\n  return {\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n  };\r\n};\r\n\r\nexport const convertTimeToSeconds = (time: Time): number => {\r\n  const hours = time.hours;\r\n  const minutes = time.minutes;\r\n  const seconds = time.seconds;\r\n\r\n  return hours * 3600 + minutes * 60 + seconds;\r\n};\r\n\r\nexport const convertTimeAsKorean = (time: Time): string => {\r\n  const { hours, minutes, seconds } = time;\r\n\r\n  return `${hours}시간 ${minutes}분 ${seconds}초`;\r\n};\r\n/**\r\n * get day\r\n * @param {Day} number - Day as a number. 0 represent Sunday, 6 Represent Saturday\r\n * @return {string} Present a day as a Korean word\r\n */\r\nexport const getDayAsKorean = (number: number): string => {\r\n  if (number === 0) {\r\n    return '일';\r\n  }\r\n\r\n  if (number === 1) {\r\n    return '월';\r\n  }\r\n\r\n  if (number === 2) {\r\n    return '화';\r\n  }\r\n\r\n  if (number === 3) {\r\n    return '수';\r\n  }\r\n\r\n  if (number === 4) {\r\n    return '목';\r\n  }\r\n\r\n  if (number === 5) {\r\n    return '금';\r\n  }\r\n\r\n  if (number === 6) {\r\n    return '토';\r\n  }\r\n\r\n  throw new Error('올바른 인자가 아닙니다');\r\n};\r\n\r\n/**\r\n * return Korean date format string from date object\r\n * @param date {Date}\r\n * @return {string}\r\n */\r\nexport function getDateAsKorean(date: Date): string {\r\n  return `${date.getFullYear()}년 ${\r\n    date.getMonth() + 1\r\n  }월 ${date.getDate()}일 ${getDayAsKorean(date.getDay())}요일`;\r\n}\r\n","import { StudyRecord } from '../@types/studyRecord';\r\nimport { Time } from '../@types/time';\r\n\r\nexport async function postStudyRecordsOfAllUsers(record: StudyRecord) {\r\n  try {\r\n    await fetch('https://api.studytimestopwatch.com/studyRecordsOfAllUsers', {\r\n      method: 'POST',\r\n      mode: 'cors',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(record),\r\n    });\r\n\r\n    return;\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n}\r\n\r\nexport async function getStatisticOfAllUsers(\r\n  signal: AbortSignal\r\n): Promise<{\r\n  totalPeriod: number;\r\n  totalStudyTime: Time;\r\n  totalRestTime: Time;\r\n}> {\r\n  const response = await fetch(\r\n    'https://api.studytimestopwatch.com/statisticOfAllUsers',\r\n    {\r\n      signal,\r\n      mode: 'cors',\r\n      headers: {\r\n        Accept: 'application/json',\r\n      },\r\n    }\r\n  );\r\n\r\n  if (response.ok) {\r\n    const json = await response.json();\r\n    const {\r\n      totalPeriod,\r\n      totalRestTime,\r\n      totalStudyTime,\r\n    }: {\r\n      totalPeriod: number;\r\n      totalRestTime: Time;\r\n      totalStudyTime: Time;\r\n    } = json;\r\n    return { totalPeriod, totalRestTime, totalStudyTime };\r\n  } else {\r\n    return {\r\n      totalPeriod: 0,\r\n      totalRestTime: { hours: 0, minutes: 0, seconds: 0 },\r\n      totalStudyTime: { hours: 0, minutes: 0, seconds: 0 },\r\n    };\r\n  }\r\n}\r\n","import React, { useState, useLayoutEffect, useRef, useReducer } from 'react';\r\nimport TimeDisplay from '../components/TimeDisplay';\r\nimport StudyRecordTable from '../components/StudyRecordTable';\r\nimport { Time } from '../@types/time';\r\nimport { StudyRecord, PeriodRecord } from '../@types/studyRecord';\r\nimport {\r\n  getNow,\r\n  convertSecondsToTime,\r\n  convertTimeToSeconds,\r\n  convertMiliSecondsToSeconds,\r\n} from '../utils/time';\r\nimport { postStudyRecordsOfAllUsers } from '../utils/fetchReocrds';\r\n\r\nimport {\r\n  Button,\r\n  Switch,\r\n  Typography,\r\n  Grid,\r\n  Dialog,\r\n  TextField,\r\n  makeStyles,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n} from '@material-ui/core';\r\n\r\ninterface StopwatchActionParameter {\r\n  type: string;\r\n  totalStudyTime: Time;\r\n  totalRestTime: Time;\r\n  heading: string;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  textCenter: {\r\n    textAlign: 'center',\r\n  },\r\n  textRight: {\r\n    textAlign: 'right',\r\n  },\r\n  timeDisplay: {\r\n    marginBottom: theme.spacing(10),\r\n  },\r\n  switch: {\r\n    marginBottom: theme.spacing(5),\r\n  },\r\n  displayedLabel: {\r\n    fontSize: `calc(2rem + 1vw)`,\r\n  },\r\n  displayedTime: {\r\n    fontSize: `calc(2.5rem + 5vw)`,\r\n  },\r\n  buttonGap: {\r\n    margin: theme.spacing(0, 1),\r\n  },\r\n}));\r\n\r\n// recordsReducer는 일시정지 버튼이 클릭될 때마다 클릭된 시간을 기록\r\n// 또는 리셋 버튼이 클릭될 경우 모든 기록을 삭제\r\nconst recordReducer = (\r\n  state: StudyRecord,\r\n  {\r\n    type,\r\n    totalStudyTime,\r\n    totalRestTime,\r\n    heading = '',\r\n  }: Partial<StopwatchActionParameter>\r\n): StudyRecord => {\r\n  let newState: StudyRecord = { ...state };\r\n  let lastPeriodRecord: Partial<PeriodRecord>;\r\n  let newPeriodRecords: Partial<PeriodRecord>[] = [...state.periodRecords];\r\n\r\n  switch (type) {\r\n    case 'reset':\r\n      return {\r\n        date: new Date(),\r\n        periodRecords: [],\r\n        heading: '',\r\n        totalStudyTime: {\r\n          hours: 0,\r\n          minutes: 0,\r\n          seconds: 0,\r\n        },\r\n        totalRestTime: {\r\n          hours: 0,\r\n          minutes: 0,\r\n          seconds: 0,\r\n        },\r\n      };\r\n    case 'studyTime':\r\n      if (newPeriodRecords.length === 0) {\r\n        newPeriodRecords.push({\r\n          period: 1,\r\n          studyTimeHours: (totalStudyTime as Time).hours,\r\n          studyTimeMinutes: (totalStudyTime as Time).minutes,\r\n          studyTimeSeconds: (totalStudyTime as Time).seconds,\r\n        });\r\n      } else {\r\n        const lastTotalStudyTime = state.totalStudyTime;\r\n        const {\r\n          hours: studyTimeHours,\r\n          minutes: studyTimeMinutes,\r\n          seconds: studyTimeSeconds,\r\n        } = convertSecondsToTime(\r\n          convertTimeToSeconds(totalStudyTime as Time) -\r\n            convertTimeToSeconds(lastTotalStudyTime)\r\n        );\r\n\r\n        newPeriodRecords.push({\r\n          period: state.periodRecords.length + 1,\r\n          studyTimeHours,\r\n          studyTimeMinutes,\r\n          studyTimeSeconds,\r\n        });\r\n      }\r\n\r\n      newState.totalStudyTime = totalStudyTime as Time;\r\n      newState.periodRecords = newPeriodRecords;\r\n\r\n      return newState;\r\n    case 'restTime':\r\n      const {\r\n        hours: restTimeHours,\r\n        minutes: restTimeMinutes,\r\n        seconds: restTimeSeconds,\r\n      } = convertSecondsToTime(\r\n        convertTimeToSeconds(totalRestTime as Time) -\r\n          convertTimeToSeconds(state.totalRestTime)\r\n      );\r\n      // 마지막 교시 기록에 휴식시간이 존재하지 않으면\r\n      // 휴식시간을 기록에 추가\r\n      // 이미 존재하면 휴식시간을 수정하지 않음\r\n      lastPeriodRecord = newPeriodRecords[newPeriodRecords.length - 1];\r\n      if (lastPeriodRecord && lastPeriodRecord.restTimeHours === undefined) {\r\n        lastPeriodRecord = {\r\n          ...lastPeriodRecord,\r\n          restTimeHours,\r\n          restTimeMinutes,\r\n          restTimeSeconds,\r\n        };\r\n      }\r\n\r\n      newPeriodRecords[newPeriodRecords.length - 1] = lastPeriodRecord;\r\n      newState.periodRecords = newPeriodRecords;\r\n      newState.totalRestTime = totalRestTime as Time;\r\n\r\n      return newState;\r\n    case 'heading':\r\n      newState = { ...newState, heading };\r\n      return newState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default function (props: any) {\r\n  const classes = useStyles();\r\n  const localStorageKeyRef = useRef('');\r\n  const totalRunningTimeRef = useRef(0);\r\n  const totalRestTimeRef = useRef(0);\r\n\r\n  const [totalStudyTime, setTotalStudyTime] = useState<Time>({\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n  });\r\n  const [totalRestTime, setTotalRestTime] = useState<Time>({\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n  });\r\n  const [isStarted, setIsStarted] = useState(false);\r\n  const [isResumed, setIsResumed] = useState(false);\r\n  const [record, setRecord] = useReducer(recordReducer, {\r\n    heading: '',\r\n    date: new Date(),\r\n    periodRecords: [],\r\n    totalStudyTime: {\r\n      hours: 0,\r\n      minutes: 0,\r\n      seconds: 0,\r\n    },\r\n    totalRestTime: {\r\n      hours: 0,\r\n      minutes: 0,\r\n      seconds: 0,\r\n    },\r\n  });\r\n  const [openSaveDialog, setOpenSaveDialog] = useState(false);\r\n  const [showTotalTime, setShowTotalTime] = useState(false);\r\n\r\n  const currentStudyTime =\r\n    !isStarted && !isResumed\r\n      ? totalStudyTime\r\n      : convertSecondsToTime(\r\n          convertTimeToSeconds(totalStudyTime) -\r\n            convertMiliSecondsToSeconds(totalRunningTimeRef.current)\r\n        );\r\n  const currentRestTime =\r\n    !isStarted && !isResumed\r\n      ? totalRestTime\r\n      : convertSecondsToTime(\r\n          convertTimeToSeconds(totalRestTime) -\r\n            convertMiliSecondsToSeconds(totalRestTimeRef.current)\r\n        );\r\n\r\n  const displayedStudyTimeHeading = !isStarted\r\n    ? '스톱워치 초기상태 또는 정지상태'\r\n    : showTotalTime\r\n    ? '누적 공부시간'\r\n    : '이번교시 공부시간';\r\n  const displayedRestTimeHeading = showTotalTime\r\n    ? '누적 휴식시간'\r\n    : '이번교시 휴식시간';\r\n  const displayedHeading =\r\n    isStarted && !isResumed\r\n      ? displayedRestTimeHeading\r\n      : displayedStudyTimeHeading;\r\n\r\n  const displayedStudyTime = showTotalTime ? totalStudyTime : currentStudyTime;\r\n  const displayedRestTime = showTotalTime ? totalRestTime : currentRestTime;\r\n  const displayedTime = isResumed ? displayedStudyTime : displayedRestTime;\r\n\r\n  const displayedLabel = isStarted\r\n    ? isResumed\r\n      ? '공부중...'\r\n      : '휴식중...'\r\n    : null;\r\n\r\n  // 리셋 이펙트\r\n  useLayoutEffect(() => {\r\n    if (!isStarted && !isResumed) {\r\n      totalRestTimeRef.current = 0;\r\n      totalRunningTimeRef.current = 0;\r\n    }\r\n  }, [isStarted, isResumed]);\r\n\r\n  // useEffect 사용시 일시정지, 시작버튼을 빠르게 연속클릭할 시\r\n  // 정지되어야 할 상황에서도 타이머가 계속 실행됨\r\n  // 공부시간을 측정하기 위한 이펙트\r\n  useLayoutEffect(() => {\r\n    // 공부하기 버튼이 클릭되면 실행\r\n    if (isStarted && isResumed) {\r\n      let rAF: number;\r\n\r\n      // 실행시간은 버튼이 클릭된 시간에서 마운트된 시간과 휴식 시간을 뺀 것\r\n      // 초기값을 totalRunningTime으로 설정해주는 것은 공부와 휴식 버튼이 빠른 속도로 계속 클릭될 경우\r\n      // 화면에 시간이 페인팅 되기 전에 이펙트가 클린업 되므로\r\n      // timeRef들이 undefined로 바뀜\r\n      // 0을 초기값으로 할 경우 totalTime 자체가 초기화 될 수 있음\r\n      let totalRunningTime: number = totalRunningTimeRef.current;\r\n\r\n      const buttonClickedTime = getNow();\r\n      const prevTotalRunningTime = totalRunningTimeRef.current;\r\n\r\n      // idleTime은 버튼이 클릭된 시간에서 이전 총실행시간을 뺸 값으로\r\n      // 현재 총실행시간을 측정하기 위한 변수\r\n      const idleTime = buttonClickedTime - prevTotalRunningTime;\r\n\r\n      rAF = requestAnimationFrame(timer);\r\n\r\n      // 컴포넌트가 화면에 painting 될 때마다 실행될 함수\r\n      function timer(): void {\r\n        totalRunningTime = getNow() - idleTime;\r\n\r\n        const totalRunningTimeAsSec = convertMiliSecondsToSeconds(\r\n          totalRunningTime\r\n        );\r\n\r\n        // 초로 표현된 시간값을 시, 분, 초값으로 변환\r\n        const {\r\n          hours: totalHours,\r\n          minutes: totalMinutes,\r\n          seconds: totalSeconds,\r\n        } = convertSecondsToTime(totalRunningTimeAsSec);\r\n\r\n        setTotalStudyTime({\r\n          hours: totalHours,\r\n          minutes: totalMinutes,\r\n          seconds: totalSeconds,\r\n        });\r\n\r\n        rAF = requestAnimationFrame(timer);\r\n      }\r\n\r\n      return () => {\r\n        // 러닝타임 레퍼런스에 타이머가 실행된 시간을 저장\r\n        totalRunningTimeRef.current = totalRunningTime;\r\n        cancelAnimationFrame(rAF);\r\n      };\r\n    }\r\n  }, [isStarted, isResumed]);\r\n\r\n  // 휴식시간을 측정하기 위한 이펙트\r\n  // 공부시간을 측정하는 이펙트와 로직은 동일\r\n  useLayoutEffect(() => {\r\n    // 시작된 후 쉬기 버튼이 클릭되었을 경우 휴식시간을 측정하기 위한 조건문\r\n    if (isStarted && !isResumed) {\r\n      let rAF: number;\r\n\r\n      let totalRestTime: number = totalRestTimeRef.current;\r\n\r\n      const buttonClickedTime: number = getNow();\r\n      const prevTotalRestTime = totalRestTimeRef.current;\r\n\r\n      // idleTime은 클릭된 시간에서 이전 총휴식시간을 뺀 값으로\r\n      // 현재 총휴식시간을 측정하기 위한 변수\r\n      const idleTime = buttonClickedTime - prevTotalRestTime;\r\n\r\n      rAF = requestAnimationFrame(timer);\r\n      function timer(): void {\r\n        const now = getNow();\r\n        totalRestTime = now - idleTime;\r\n\r\n        const totalRestTimeAsSec = convertMiliSecondsToSeconds(totalRestTime);\r\n\r\n        const {\r\n          hours: totalHours,\r\n          minutes: totalMinutes,\r\n          seconds: totalSeconds,\r\n        } = convertSecondsToTime(totalRestTimeAsSec);\r\n\r\n        setTotalRestTime({\r\n          hours: totalHours,\r\n          minutes: totalMinutes,\r\n          seconds: totalSeconds,\r\n        });\r\n\r\n        rAF = requestAnimationFrame(timer);\r\n      }\r\n\r\n      return () => {\r\n        totalRestTimeRef.current = totalRestTime;\r\n        cancelAnimationFrame(rAF);\r\n      };\r\n    }\r\n  }, [isStarted, isResumed]);\r\n\r\n  return (\r\n    <Grid container justify=\"center\" alignItems=\"center\">\r\n      <Typography variant=\"srOnly\" component=\"h2\">\r\n        스톱워치 및 공부기록\r\n      </Typography>\r\n\r\n      {/* 스톱워치 디스플레이 아티클 */}\r\n      <Grid\r\n        item\r\n        component=\"article\"\r\n        xs={12}\r\n        md={7}\r\n        className={classes.timeDisplay}\r\n      >\r\n        <Typography variant=\"srOnly\" component=\"h3\">\r\n          스톱워치 디스플레이\r\n        </Typography>\r\n\r\n        {/* 스톱워치 디스플레이 상태 스위치 */}\r\n        <Typography component=\"div\" className={classes.switch}>\r\n          <Grid\r\n            component=\"label\"\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"flex-end\"\r\n            spacing={1}\r\n          >\r\n            <Grid item>이번교시</Grid>\r\n            <Grid item>\r\n              <Switch\r\n                checked={showTotalTime}\r\n                onChange={() => {\r\n                  setShowTotalTime((state) => !state);\r\n                }}\r\n                inputProps={{ 'aria-label': 'Display state checkbox' }}\r\n                color=\"primary\"\r\n              />\r\n            </Grid>\r\n            <Grid item>누적</Grid>\r\n          </Grid>\r\n        </Typography>\r\n\r\n        {/* 스톱워치 디스플레이 시간 및 상태 표시 */}\r\n        <div>\r\n          <Typography variant=\"srOnly\" component=\"h4\">\r\n            {displayedHeading}\r\n          </Typography>\r\n\r\n          <div>\r\n            <Typography\r\n              align=\"center\"\r\n              component=\"div\"\r\n              className={classes.displayedLabel}\r\n            >\r\n              {displayedLabel}\r\n            </Typography>\r\n            <Typography\r\n              align=\"center\"\r\n              component=\"div\"\r\n              className={classes.displayedTime}\r\n            >\r\n              <TimeDisplay\r\n                hours={displayedTime.hours}\r\n                minutes={displayedTime.minutes}\r\n                seconds={displayedTime.seconds}\r\n              />\r\n            </Typography>\r\n          </div>\r\n        </div>\r\n\r\n        {/* 스톱워치 디스플레이 버튼 */}\r\n        <div className={classes.textCenter}>\r\n          {/* 타이머가 한 번이라도 측정되었거나 기록이 저장되었으면 리셋 버튼을 표시 */}\r\n          {(isStarted || localStorageKeyRef.current) && (\r\n            <Button\r\n              className={classes.buttonGap}\r\n              size=\"large\"\r\n              variant=\"contained\"\r\n              color=\"secondary\"\r\n              onClick={() => {\r\n                localStorageKeyRef.current = '';\r\n                setTotalStudyTime({ hours: 0, minutes: 0, seconds: 0 });\r\n                setTotalRestTime({ hours: 0, minutes: 0, seconds: 0 });\r\n                setIsStarted(false);\r\n                setIsResumed(false);\r\n                setRecord({ type: 'reset' });\r\n              }}\r\n            >\r\n              리셋\r\n            </Button>\r\n          )}\r\n\r\n          {isResumed ? (\r\n            <Button\r\n              className={classes.buttonGap}\r\n              size=\"large\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                setIsResumed(false);\r\n                setRecord({\r\n                  type: 'studyTime',\r\n                  totalStudyTime,\r\n                });\r\n              }}\r\n            >\r\n              휴식\r\n            </Button>\r\n          ) : (\r\n            <Button\r\n              className={classes.buttonGap}\r\n              size=\"large\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                setIsStarted(true);\r\n                setIsResumed(true);\r\n                // 휴식시간은 공부하기 버튼이 클릭될 때 측정됨\r\n                setRecord({\r\n                  type: 'restTime',\r\n                  totalRestTime,\r\n                });\r\n              }}\r\n            >\r\n              공부\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </Grid>\r\n\r\n      {/* 공부기록 섹션 */}\r\n      <Grid item component=\"section\" xs={12} md={7}>\r\n        <Typography variant=\"srOnly\" component=\"h3\">\r\n          공부기록\r\n        </Typography>\r\n        <div className={classes.textRight}>\r\n          {/* 저장하기 버튼은 저장하기 modal을 여는 역할을 함 */}\r\n          {/* 실제로 저장하는 것이 아님 */}\r\n          <Button\r\n            size=\"large\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              // 한 번이라도 스톱워치가 공부시간을 측정하지 않은 경우\r\n              if (record.periodRecords.length === 0 && !isStarted) {\r\n                alert('공부 기록이 존재하지 않습니다');\r\n                return;\r\n              }\r\n\r\n              if (isResumed) {\r\n                // 현재 공부시간을 측정 중인 경우 공부시간을 기록\r\n                // 기록 후 휴식시간을 계속 측정\r\n                setRecord({\r\n                  type: 'studyTime',\r\n                  totalStudyTime,\r\n                });\r\n                setIsResumed(false);\r\n              } else {\r\n                // 현재 휴식시간을 측정 중인 경우\r\n                // 휴식시간을 기록 후 타이머를 멈춤\r\n                setRecord({\r\n                  type: 'restTime',\r\n                  totalRestTime,\r\n                });\r\n              }\r\n              setOpenSaveDialog(true);\r\n            }}\r\n          >\r\n            저장\r\n          </Button>\r\n        </div>\r\n\r\n        <StudyRecordTable record={record} />\r\n      </Grid>\r\n\r\n      <Dialog\r\n        open={openSaveDialog}\r\n        onClose={() => {\r\n          setOpenSaveDialog(false);\r\n        }}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        <DialogTitle disableTypography id=\"form-dialog-title\">\r\n          <Typography variant=\"h6\" component=\"h3\">\r\n            공부기록 저장\r\n          </Typography>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <form\r\n            onSubmit={(e) => {\r\n              e.preventDefault();\r\n              let key: string;\r\n              if (localStorageKeyRef.current === '') {\r\n                // 만약 스톱워치 사용중 저장한 적이 없으면\r\n                // 로컬 스토리지에 저장된 아이템의 개수에 1을 더해서 키값으로 설정\r\n                key = `${localStorage.length + 1}. ${record.heading}`;\r\n                localStorage.setItem(\r\n                  key,\r\n                  JSON.stringify({\r\n                    ...record,\r\n                    localKey: localStorage.length + 1,\r\n                  })\r\n                );\r\n                localStorageKeyRef.current = key;\r\n              } else {\r\n                // 스톱워치 사용중 저장한 적이 있으면\r\n                // 로컬스토리지에 저장된 아이템 개수를 기준으로 키값 설정\r\n                // 왜냐하면 현재 존재하는 마지막 아이템을 지운 후\r\n                // 다시 새 아이템을 로컬 스토리지에 저장할 것이므로\r\n                key = `${localStorage.length}. ${record.heading}`;\r\n                localStorage.removeItem(localStorageKeyRef.current);\r\n                localStorage.setItem(\r\n                  key,\r\n                  JSON.stringify({ ...record, localKey: localStorage.length })\r\n                );\r\n                localStorageKeyRef.current = key;\r\n              }\r\n\r\n              postStudyRecordsOfAllUsers(record);\r\n\r\n              setOpenSaveDialog(false);\r\n              setRecord({ type: 'heading', heading: '' });\r\n            }}\r\n          >\r\n            <TextField\r\n              autoFocus\r\n              id=\"saveRecordHeading\"\r\n              label=\"제목\"\r\n              type=\"text\"\r\n              onChange={(e) =>\r\n                setRecord({ type: 'heading', heading: e.target.value })\r\n              }\r\n            />\r\n\r\n            <DialogActions>\r\n              <Button\r\n                onClick={() => {\r\n                  setRecord({ type: 'heading', heading: '' });\r\n                  setOpenSaveDialog(false);\r\n                }}\r\n              >\r\n                취소\r\n              </Button>\r\n              <Button type=\"submit\">저장</Button>\r\n            </DialogActions>\r\n          </form>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </Grid>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Time } from '../@types/time';\r\nimport {\r\n  convertTimeAsKorean,\r\n  convertSecondsToTime,\r\n  convertTimeToSeconds,\r\n} from '../utils/time';\r\nimport { Typography, Grid, makeStyles } from '@material-ui/core';\r\n\r\ninterface StatisticProps {\r\n  heading?: string;\r\n  totalPeriod: number;\r\n  totalStudyTime: Time;\r\n  totalRestTime: Time;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  heading: {\r\n    marginBottom: theme.spacing(4),\r\n  },\r\n}));\r\n\r\nexport default function ({\r\n  heading,\r\n  totalPeriod,\r\n  totalStudyTime,\r\n  totalRestTime,\r\n}: StatisticProps) {\r\n  const classes = useStyles();\r\n  let initialAverageTime: Time = { hours: 0, minutes: 0, seconds: 0 };\r\n  let averageStudyTime: Time;\r\n  let averageRestTime: Time;\r\n\r\n  // 총 공부한 교시가 0교시일 경우\r\n  // 교시당 공부시간과 휴식시간은 모두 0시간 0분 0초\r\n  // 공부한 교시가 1교시 이상일 경우\r\n  // 교시당 공부시간과 휴식시간을 계산함\r\n  if (totalPeriod === 0) {\r\n    averageStudyTime = initialAverageTime;\r\n    averageRestTime = initialAverageTime;\r\n  } else {\r\n    averageStudyTime = convertSecondsToTime(\r\n      Math.round(convertTimeToSeconds(totalStudyTime) / totalPeriod)\r\n    );\r\n\r\n    averageRestTime = convertSecondsToTime(\r\n      Math.round(convertTimeToSeconds(totalRestTime) / totalPeriod)\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Grid container component=\"article\" justify=\"center\" spacing={2}>\r\n      {heading ? (\r\n        <Grid item xs={12} className={classes.heading}>\r\n          <Typography variant=\"h5\" component=\"h2\" align=\"center\">\r\n            {heading}\r\n          </Typography>\r\n        </Grid>\r\n      ) : null}\r\n\r\n      <Grid item xs={12}>\r\n        <Typography variant=\"body1\" component=\"div\" align=\"center\">\r\n          총 교시\r\n        </Typography>\r\n\r\n        <Typography variant=\"body1\" component=\"div\" align=\"center\">\r\n          {totalPeriod}교시\r\n        </Typography>\r\n      </Grid>\r\n\r\n      <Grid item xs={12} md={6}>\r\n        <Typography variant=\"body1\" component=\"div\" align=\"center\">\r\n          총 공부시간\r\n        </Typography>\r\n\r\n        <Typography variant=\"body1\" component=\"div\" align=\"center\">\r\n          {convertTimeAsKorean(totalStudyTime)}\r\n        </Typography>\r\n      </Grid>\r\n\r\n      <Grid item xs={12} md={6}>\r\n        <Typography variant=\"body1\" component=\"div\" align=\"center\">\r\n          총 휴식시간\r\n        </Typography>\r\n\r\n        <Typography variant=\"body1\" component=\"div\" align=\"center\">\r\n          {convertTimeAsKorean(totalRestTime)}\r\n        </Typography>\r\n      </Grid>\r\n\r\n      <Grid item xs={12} md={6}>\r\n        <Typography variant=\"body1\" component=\"div\" align=\"center\">\r\n          교시당 공부시간\r\n        </Typography>\r\n\r\n        <Typography variant=\"body1\" component=\"div\" align=\"center\">\r\n          {convertTimeAsKorean(averageStudyTime)}\r\n        </Typography>\r\n      </Grid>\r\n\r\n      <Grid item xs={12} md={6}>\r\n        <Typography variant=\"body1\" component=\"div\" align=\"center\">\r\n          교시당 휴식시간\r\n        </Typography>\r\n\r\n        <Typography variant=\"body1\" component=\"div\" align=\"center\">\r\n          {convertTimeAsKorean(averageRestTime)}\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { StudyRecord } from '../@types/studyRecord';\r\nimport { Time } from '../@types/time';\r\nimport {\r\n  convertSecondsToTime,\r\n  convertTimeToSeconds,\r\n  convertTimeAsKorean,\r\n  getDateAsKorean,\r\n} from '../utils/time';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport Statistic from '../components/Statistic';\r\nimport {\r\n  Button,\r\n  makeStyles,\r\n  Grid,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Link,\r\n  Collapse,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  flex: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  columnDirection: {\r\n    flexDirection: 'column',\r\n  },\r\n  textRight: {\r\n    textAlign: 'right',\r\n  },\r\n}));\r\n\r\nexport default function (props: any) {\r\n  const classes = useStyles();\r\n  const [records, setRecords] = useState<StudyRecord[]>([]);\r\n  const dates = [\r\n    ...new Set(records.map((record) => getDateAsKorean(record.date))),\r\n  ].sort();\r\n  const [openRecord, setOpenRecord] = useState('');\r\n  const totalPeriod: number = (records as any[]).reduce(\r\n    (prevTotalPeriod: number, record: StudyRecord): number => {\r\n      return prevTotalPeriod + record.periodRecords.length;\r\n    },\r\n    0\r\n  );\r\n  const totalStudyTime: Time = convertSecondsToTime(\r\n    (records as any[]).reduce(\r\n      (timeAsSec: number, record: StudyRecord): number => {\r\n        return timeAsSec + convertTimeToSeconds(record.totalStudyTime);\r\n      },\r\n      0\r\n    )\r\n  );\r\n  const totalRestTime: Time = convertSecondsToTime(\r\n    (records as any[]).reduce(\r\n      (timeAsSec: number, record: StudyRecord): number => {\r\n        return timeAsSec + convertTimeToSeconds(record.totalRestTime);\r\n      },\r\n      0\r\n    )\r\n  );\r\n\r\n  // effect to init states\r\n  useEffect(() => {\r\n    let records: StudyRecord[] = [];\r\n    if (localStorage.length === 0) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key: string = localStorage.key(i) as string;\r\n      const record = JSON.parse(\r\n        localStorage.getItem(key) as string\r\n      ) as StudyRecord;\r\n      record.date = new Date(record.date);\r\n      // id is started from 1, not 0\r\n      records.push(record);\r\n    }\r\n\r\n    setRecords(records);\r\n  }, []);\r\n\r\n  return (\r\n    <Grid container justify=\"center\" alignItems=\"center\">\r\n      <Grid item xs={12} md={7} className={classes.textRight}>\r\n        <Button\r\n          size=\"large\"\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={() => {\r\n            localStorage.clear();\r\n            setRecords([]);\r\n          }}\r\n        >\r\n          리셋\r\n        </Button>\r\n      </Grid>\r\n\r\n      <Grid item xs={12} md={7}>\r\n        <Statistic\r\n          heading=\"내 통계\"\r\n          totalPeriod={totalPeriod}\r\n          totalStudyTime={totalStudyTime}\r\n          totalRestTime={totalRestTime}\r\n        />\r\n      </Grid>\r\n\r\n      <Grid item xs={12} md={7}>\r\n        <Typography variant=\"srOnly\" component=\"h2\">\r\n          공부 기록 목록\r\n        </Typography>\r\n        <List component=\"ol\">\r\n          {/* 날짜를 기준으로 기록을 분류 */}\r\n          {dates.map((date) => (\r\n            <ListItem\r\n              className={classes.columnDirection}\r\n              component=\"li\"\r\n              button\r\n              key={date}\r\n              onClick={() => {\r\n                if (openRecord === date) {\r\n                  setOpenRecord('');\r\n                } else {\r\n                  setOpenRecord(date);\r\n                }\r\n              }}\r\n            >\r\n              <div className={classes.flex}>\r\n                <ListItemText>{date}</ListItemText>\r\n                {openRecord === date ? <ExpandLess /> : <ExpandMore />}\r\n              </div>\r\n\r\n              <Collapse component=\"div\" in={openRecord === date} timeout=\"auto\">\r\n                <List>\r\n                  {/* 기록에서 같은 날짜인 것들만 필터링 해서 렌더링 */}\r\n                  {records\r\n                    .filter((record) => date === getDateAsKorean(record.date))\r\n                    .map((record) => (\r\n                      <ListItem\r\n                        className={classes.columnDirection}\r\n                        key={(record.localKey as number).toString()}\r\n                      >\r\n                        <ListItemText>{record.heading}</ListItemText>\r\n                        <ListItemText>\r\n                          공부시간 {convertTimeAsKorean(record.totalStudyTime)}\r\n                        </ListItemText>\r\n                        <ListItemText>\r\n                          휴식시간 {convertTimeAsKorean(record.totalRestTime)}\r\n                        </ListItemText>\r\n                        <ListItemText>\r\n                          <Link\r\n                            component={RouterLink}\r\n                            to={`/myRecords/${record.id}`}\r\n                          >\r\n                            세부 기록\r\n                          </Link>\r\n                        </ListItemText>\r\n                      </ListItem>\r\n                    ))}\r\n                </List>\r\n              </Collapse>\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport Statistic from '../components/Statistic';\r\nimport StudyRecordTable from '../components/StudyRecordTable';\r\nimport { useParams } from 'react-router-dom';\r\nimport { StudyRecord } from '../@types/studyRecord';\r\nimport { getDateAsKorean } from '../utils/time';\r\nimport { Typography, makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  heading: {\r\n    marginBottom: theme.spacing(5),\r\n  },\r\n  date: {\r\n    marginBottom: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function (props: any) {\r\n  const classes = useStyles();\r\n  const { id }: { id: string } = useParams();\r\n  const [record, setRecord] = useState<StudyRecord | null>(null);\r\n\r\n  useEffect(() => {\r\n    const idAsNumber: number = Number(id);\r\n    // id는 1부터 시작하지만 index는 0부터 시작하므로 idAsNumber - 1\r\n    const localStorageKey = localStorage.key(idAsNumber - 1) as string;\r\n    const record: StudyRecord = JSON.parse(\r\n      localStorage.getItem(localStorageKey) as string\r\n    ) as StudyRecord;\r\n    record.date = new Date(record.date);\r\n    setRecord(record);\r\n  }, [id]);\r\n\r\n  if (record === null) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Typography\r\n        variant=\"h4\"\r\n        component=\"h2\"\r\n        align=\"center\"\r\n        className={classes.heading}\r\n      >\r\n        {record.heading}\r\n      </Typography>\r\n\r\n      <Typography\r\n        variant=\"body1\"\r\n        component=\"p\"\r\n        align=\"right\"\r\n        className={classes.date}\r\n      >\r\n        {getDateAsKorean(record.date)}\r\n      </Typography>\r\n\r\n      <Statistic\r\n        totalPeriod={record.periodRecords.length}\r\n        totalStudyTime={record.totalStudyTime}\r\n        totalRestTime={record.totalRestTime}\r\n      />\r\n\r\n      <StudyRecordTable record={record} />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport Statistic from '../components/Statistic';\r\nimport { getStatisticOfAllUsers } from '../utils/fetchReocrds';\r\nimport { Time } from '../@types/time';\r\nimport { Typography, makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  info: {\r\n    marginBottom: theme.spacing(5),\r\n  },\r\n}));\r\n\r\nexport default function ({\r\n  statisticFetched,\r\n  totalPeriod,\r\n  totalStudyTime,\r\n  totalRestTime,\r\n  setStatisticFetched,\r\n  setTotalPeriod,\r\n  setTotalStudyTime,\r\n  setTotalRestTime,\r\n}: {\r\n  statisticFetched: boolean;\r\n  totalPeriod: number;\r\n  totalStudyTime: Time;\r\n  totalRestTime: Time;\r\n  setStatisticFetched: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setTotalPeriod: React.Dispatch<React.SetStateAction<number>>;\r\n  setTotalStudyTime: React.Dispatch<React.SetStateAction<Time>>;\r\n  setTotalRestTime: React.Dispatch<React.SetStateAction<Time>>;\r\n}) {\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    if (statisticFetched) {\r\n      return;\r\n    }\r\n\r\n    const abortController = new AbortController();\r\n    const signal = abortController.signal;\r\n    getStatisticOfAllUsers(signal)\r\n      .then((fetchResult) => {\r\n        const { totalPeriod, totalStudyTime, totalRestTime } = fetchResult;\r\n        setStatisticFetched(true);\r\n        setTotalPeriod(totalPeriod);\r\n        setTotalStudyTime(totalStudyTime);\r\n        setTotalRestTime(totalRestTime);\r\n      })\r\n      .catch(console.error);\r\n\r\n    return () => {\r\n      abortController.abort();\r\n    };\r\n  }, [\r\n    statisticFetched,\r\n    setStatisticFetched,\r\n    setTotalPeriod,\r\n    setTotalStudyTime,\r\n    setTotalRestTime,\r\n  ]);\r\n\r\n  return (\r\n    <div>\r\n      <Typography\r\n        component=\"p\"\r\n        variant=\"body1\"\r\n        align=\"center\"\r\n        className={classes.info}\r\n      >\r\n        전체유저 통계는 실시간 업데이트 되지 않고 일 단위로 업데이트 됩니다\r\n      </Typography>\r\n      <Statistic\r\n        heading=\"전체유저 통계\"\r\n        totalPeriod={totalPeriod}\r\n        totalStudyTime={totalStudyTime}\r\n        totalRestTime={totalRestTime}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { Header } from './components/HeaderAndNav';\nimport Stopwatch from './pages/Stopwatch';\nimport MyRecords from './pages/MyRecords';\nimport DetailRecord from './pages/DetailRecord';\nimport StatisticOfUsers from './pages/StatisticOfUsers';\nimport { CssBaseline, Container, makeStyles, Toolbar } from '@material-ui/core';\nimport { Time } from './@types/time';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    minHeight: '100vh',\n  },\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  main: {\n    marginBottom: theme.spacing(2),\n  },\n  footer: {\n    padding: theme.spacing(3, 2),\n    marginTop: 'auto',\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [fetchStatistic, setFetchStatistic] = useState(false);\n  const [totalPeriod, setTotalPeriod] = useState(0);\n  const [totalStudyTime, setTotalStudyTime] = useState<Time>({\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  });\n  const [totalRestTime, setTotalRestTime] = useState<Time>({\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n  });\n\n  return (\n    <div className=\"App\" aria-live=\"assertive\">\n      <CssBaseline />\n      <div className={classes.root}>\n        <Header />\n\n        <div className={classes.content}>\n          <Toolbar />\n          <Container component=\"main\" className={classes.main}>\n            <Switch>\n              <Route exact path=\"/myRecords/:id\">\n                <DetailRecord />\n              </Route>\n\n              <Route exact path=\"/myRecords\">\n                <MyRecords />\n              </Route>\n\n              <Route exact path=\"/statisticOfUsers\">\n                <StatisticOfUsers\n                  statisticFetched={fetchStatistic}\n                  totalPeriod={totalPeriod}\n                  totalStudyTime={totalStudyTime}\n                  totalRestTime={totalRestTime}\n                  setStatisticFetched={setFetchStatistic}\n                  setTotalPeriod={setTotalPeriod}\n                  setTotalStudyTime={setTotalStudyTime}\n                  setTotalRestTime={setTotalRestTime}\n                />\n              </Route>\n\n              <Route path=\"/\">\n                <Stopwatch />\n              </Route>\n            </Switch>\n          </Container>\n\n          <footer className={classes.footer}>test</footer>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}